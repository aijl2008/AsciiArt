// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x6f\x6f\x1b\xb7\x19\x7f\x1f\x20\xdf\x81\x63\x32\x48\x1e\x7c\x27\x39\x75\x3a\x43\xd6\x09\xe8\x96\x74\x6b\xd1\x36\xdd\x92\x0e\x1b\x8a\xc2\xa0\xee\x1e\x49\x6c\x78\xe4\x95\xe4\xd9\x72\x3b\xbf\x18\x06\x2c\xed\xfe\x61\x43\x9a\x75\x43\x32\x74\x18\xd0\x61\x2f\x92\xad\xd8\xab\x62\x59\x93\x2f\x13\xdb\xf1\xb7\x18\x48\xde\x9d\xee\x4e\x3a\xd9\x0a\xbc\x09\x01\x7c\x47\xf2\xf9\x3d\xbf\xe7\xc7\x87\xcf\x91\x4c\xff\x1b\xd7\x6e\x7c\xf7\xd6\x4f\xde\xbe\x8e\x26\x3a\x66\x83\x8b\x17\xfa\xe6\x2f\x62\x84\x8f\x03\x0c\x1c\xdb\x16\x20\xd1\xe0\xe2\x05\x84\x10\xea\xc7\xa0\x09\x0a\x27\x44\x2a\xd0\x01\x7e\xe7\xd6\xab\xde\x16\xce\xfb\x34\xd5\x0c\x06\xaf\xa8\x90\x52\xf4\x8a\xd4\xfd\x8e\x6b\xc8\x7a\x19\xe5\xb7\x91\x04\x16\x60\xa5\xf7\x19\xa8\x09\x80\xc6\x68\x22\x61\x14\xe0\x4e\x27\x8c\xb8\x3f\x14\x42\x87\x4a\xf9\xa1\x88\x3b\x71\x94\xd2\x4e\xd7\x7f\xc9\xef\x76\x42\xa5\xec\xab\x1f\x53\xee\x87\x4a\xe1\x0a\xa2\x03\x98\x68\x9d\xa8\xde\x3c\xcc\x48\x70\xed\x91\x3d\x50\x22\x86\xce\xa6\xff\xed\x0c\xae\xdc\x6c\x21\xe7\x88\xe5\x3e\x54\x28\x69\xa2\x91\x92\xe1\x29\x2c\xdf\x2f\x91\x7c\x5f\xe1\x41\xbf\xe3\x4c\x0b\x20\x83\x9d\xbd\x98\x9f\x1f\x13\xca\xd1\x47\xb3\x06\xf3\x4b\x84\xa2\x9a\x0a\xde\x43\x64\xa8\x04\x4b\x35\x6c\x57\x07\x68\x91\xf4\xd0\xc6\xd5\x6e\x32\xad\x75\xec\xd1\x48\x4f\x7a\x68\xa3\xdb\xfd\x66\xa9\xe7\xe0\xe2\x85\x92\xc7\x91\x90\xb1\x37\xa2\xc0\xa2\xba\xdf\x98\xc8\x31\xe5\x3d\xd4\x45\x24\xd5\x62\xbb\x89\x94\x04\x46\x34\xdd\xad\x93\xca\x7c\xbf\xdc\xad\xd2\xaa\x3a\x0f\x53\xa5\x45\xec\x85\x82\x6b\x42\x39\xc8\x3a\x05\x0d\x53\xed\x11\x46\xc7\xbc\x87\x42\xe0\x1a\x64\x9d\x06\x89\x22\xca\xc7\x26\xc6\x25\x6e\xf6\x24\x49\x92\x79\xf4\x09\xd0\xf1\x44\xf7\xd0\x56\x45\x1e\xf3\x13\xbb\x20\x47\x4c\xec\xf5\xea\xa1\x57\x70\x2f\x11\x93\xd5\x9e\x21\xd9\x04\x5d\x93\xde\xfc\x6c\x9a\xed\x65\xfd\x57\xbb\xdd\x45\xdd\x8a\x7e\x08\x3d\xe4\x5f\x95\x10\xd7\xba\x19\xe5\xe0\x65\xe8\x57\x97\x84\xec\xa8\xd1\x98\x8c\xc1\xca\x0b\xbc\x91\xe3\x82\xd9\x8d\xc9\xd4\x3b\x53\xf2\x98\xbc\xf1\x1a\xe4\xcd\xe6\xc6\x73\xe9\xf9\xf2\x5c\x76\xe6\xfd\x43\xa1\xb5\x88\x7b\x68\x6b\x49\x38\x55\x47\x8c\x0c\x81\xd5\xdd\x85\x82\x09\xd9\x43\x72\x3c\x24\xed\xee\x3a\x72\xff\xfc\xab\x9b\x6b\x0d\x6e\x1d\xad\x65\x69\x53\x75\x4a\x5f\xc4\x61\x15\xd0\xac\x6e\x8f\x86\xe2\x45\x97\x78\x77\x7e\x89\x9f\xba\x42\x1a\xa7\xd1\xfc\xe9\x77\xf2\x0a\xd4\xef\x64\x05\xfd\xe2\x85\xfe\x50\x44\xfb\xa6\x29\xa2\xbb\x28\x64\x44\xa9\x00\x17\xcc\x8b\x1a\x48\x6a\x45\x76\x4c\xf5\x24\x1d\xda\x02\x38\x95\x8c\xf2\x8e\x2d\xf9\xaf\x48\x8d\x91\x26\x72\x6c\x3e\x0c\x3b\x43\x46\xf8\x6d\x5c\xb0\xc8\xb1\xa3\x94\x7a\x43\xcd\x51\xfe\xe0\x24\xb2\x6f\x92\x26\x09\x83\xf2\xb3\xb7\x37\xa1\x3a\x6b\xb1\x33\xe0\xe9\x09\xc4\xe0\x91\xd0\x84\x3f\x03\xb7\x03\xb4\x10\x4c\xd3\x24\xc0\x1f\x65\x6b\xa0\x87\x5a\x47\x9f\x7f\x71\xfc\xe0\x57\xe8\x7b\x96\x6f\xeb\x00\x97\xca\x6f\x9f\xe6\x9c\x46\x04\x8d\x88\xe7\x62\x32\x4f\x6c\x8c\x11\x91\x94\x78\x13\x1a\x45\xc0\x03\xac\x65\x0a\x18\x59\xf5\x02\x9c\x65\xc2\xa5\xd1\x68\xb3\xbb\xb5\x61\xca\x3c\xcd\x65\xea\x10\x2b\x6e\x44\x77\x17\x28\x9a\x91\x2c\xf1\xf7\x12\xca\x6f\x17\x1a\x9b\xda\x5c\x30\x2a\xea\x34\x46\x24\x34\xc9\x12\xe0\x8e\x5d\xe5\x18\xd1\xc8\xf5\x63\x14\x83\x9e\x88\x28\xc0\x89\x50\x1a\x23\xe0\xa1\xde\x4f\x20\xc0\x71\x6a\x64\x20\x52\x77\x2c\x4c\x44\x34\xa9\xc6\xcd\x93\x54\x3b\x18\xca\xc0\xb3\xaf\xb9\x33\x87\x60\xda\x31\xe2\x24\x86\x00\xdb\xaa\xb2\xe3\x5a\x9c\x1e\x65\xac\x72\x8c\x36\x3c\x98\x6a\x07\x35\xa8\x66\xe6\x4c\x6d\x3b\xce\x4d\x3a\xd1\x20\x29\x61\xf6\x4d\xe1\x41\xc8\x44\x1a\xed\xa4\x09\x13\x24\x9a\xa9\xda\xc4\xdb\xd0\xcb\x69\xd7\xa9\xee\x98\x06\xbc\x98\x99\x0b\x18\x15\x18\xb8\xea\x26\x5f\xa4\x8c\x84\x30\x11\x2c\x02\x19\xe0\xa3\x07\x0f\x0f\x1f\x7c\xf9\xec\xab\x5f\x3e\xfb\xcf\x5f\x70\xa7\x1c\x7f\x36\xd7\xff\x1b\x3d\x28\x57\x20\xf5\x8e\xd9\xe4\x9c\x2e\x87\x19\xb5\x48\x0e\xd3\xbe\x54\x09\x5c\x8d\xf5\xf0\xfe\x93\xe3\x4f\xee\x9c\xdc\x7d\x72\xf4\xdb\x2f\xfe\x7f\xb1\x22\xbb\x51\x0c\xf0\xe1\xa3\xcf\x8e\x1f\xfe\xed\xe4\xfe\x2f\xf0\xc0\x7c\x1b\x77\x22\xb1\xc7\x97\xa6\x83\x0b\xd5\x6c\x47\x49\xa8\x41\xaa\x95\x42\x2d\x9c\xa1\x5d\xc2\x52\x08\xf0\x9b\x5b\xdd\x1f\x6d\xd0\xde\xb7\x7e\xba\x8e\xce\x1c\x7b\xe5\xc3\x31\x17\xba\xfb\x7a\x95\x39\x85\x82\x79\x53\xe5\x6d\xe0\xc1\xe1\xc7\x77\x0e\xef\x3f\xe9\x77\xec\x98\xba\xa1\x02\x06\x61\x1e\x9f\x4a\x87\x3b\xb6\xb6\x57\xc3\xcb\xc6\x94\x61\x37\x8b\x3a\xe5\x76\x74\x1e\x83\x91\x36\xbb\x0b\x88\xb7\xb3\x4d\x9e\x27\xdd\x56\xe0\x25\x88\xb7\x17\x27\x3f\x2a\xa1\x0f\xe6\x47\xf4\x45\x62\x4a\x52\x2e\x9a\x89\xe4\x1f\x5f\x6f\x24\xd3\x7e\xc7\x75\x9c\x6e\x72\xc5\x9a\x5c\x59\xc5\x64\xd3\x9a\x6c\xae\x62\xb2\x65\x4d\xb6\x56\x31\xd9\xe8\x62\xe4\xe2\x86\xc8\x46\xd5\x6d\xb4\xee\x77\x16\x0a\x34\x3f\x71\x6e\xeb\x75\x96\x99\x5b\x55\xf6\x93\x7b\x4f\x57\x95\xfd\xe4\xde\xd3\x55\x65\x3f\xb9\xf7\x74\x55\xd9\x4f\xee\x3d\x7d\x71\xd9\x4d\x54\x2b\xc9\xfe\xe2\xab\xf3\xd4\xc2\x84\xaa\x4b\x36\x5f\x5b\xc5\x49\xc4\x6c\x74\xf1\xc0\x6e\x09\xe8\x87\xb0\xa0\x4a\x55\xb2\x61\x38\x3e\xcf\xf5\x7b\xe5\x9c\xd6\xef\x90\x91\xf0\x76\x7d\x7b\x93\x37\x16\x6b\xc1\x7e\x16\x9e\xff\xfc\xd7\x47\x7f\xfa\xe7\xc9\xe3\xdf\x3f\xff\xe4\x5f\x67\x9f\x5d\x09\x51\x0d\xde\xb4\x54\x20\x8f\xff\xfd\xd7\x95\x20\xc7\x12\x80\xd7\x39\xbb\xc6\x2a\xee\xe3\xa7\x2b\xe1\x0e\xd9\xfc\x4e\xcf\xb6\x55\x50\x9f\xdf\xfd\xf3\x8a\x6c\xc9\xfe\x3c\x59\xb2\x5f\xe3\xfa\xb3\x2f\x9b\x51\xcf\x54\x6d\x12\xa3\xc9\x39\x97\x99\x25\xd9\x91\xb1\x3f\x7c\xf4\xd9\xb3\xaf\xef\x9e\x6b\x52\x38\xc8\xf3\x4f\x8a\x0c\xf7\x9c\x93\xc2\xa1\x9e\x5b\x52\xd4\x17\x5d\x46\x7a\xc5\xec\x38\x75\xbb\x36\xbb\x87\xa9\x5f\xcc\xcc\x95\xc9\x61\xaa\xb5\xe0\x76\xaf\xa9\xd2\x61\x4c\x75\x43\xd9\x69\x3c\xe3\x49\x42\x15\x44\x4d\xe7\xb8\xf9\xd3\xdf\x82\xb3\xde\xe0\xf8\xd3\xcf\x8f\x3e\xfe\x9d\xdb\xb3\x1d\x7f\xfa\xb8\x2e\x80\xe3\xd8\x20\x40\xdf\x1e\x85\x9a\x0e\x67\xc6\x63\x44\x09\x13\x63\x77\xba\x82\x29\x89\xcd\xe1\x73\xb3\x38\x9b\xcd\x6d\x75\xc9\x10\xe5\x0f\xde\x28\x65\xcc\xcb\x76\x67\x25\xf3\x4d\xd3\x59\x39\x78\xe5\xa7\xe8\xd2\x55\x52\xf1\x65\xaa\xc0\x3b\x29\xf0\xe0\xe8\x0f\x77\x8e\x1e\x3c\x74\xc7\xca\x26\x14\x77\xeb\xb3\x14\xc6\xa5\xd1\x0c\xa6\xa2\x8c\x09\xcd\xb0\x3e\x8d\x53\xe2\x11\xef\x0a\x5a\xf0\x21\xed\x27\x12\x6a\x08\xe6\x50\x9c\x48\x38\xdd\xdd\x12\xf2\xcd\xfe\x68\x3c\x46\x84\xe9\xfc\xa8\xf2\xec\xab\xdf\x1c\x3e\xfa\xe3\xe1\x83\xbf\xe3\x3a\x30\x76\x97\xb6\x05\xee\x82\x6b\x32\x5c\xe3\x98\xff\xbd\x78\xa1\x5f\xb9\xbc\xdd\x25\x12\x99\x49\x0f\x10\x87\x3d\x3b\xf5\xfe\x2d\x32\x6c\xb7\x2e\x95\x27\xbb\x95\x5f\x06\x45\x22\x4c\x63\xe0\xda\x1f\x83\xbe\xce\xc0\x3c\x7e\x67\xff\xb5\xa8\xdd\x2a\x32\xab\xb5\xe6\x93\x28\xba\xbe\x0b\x5c\xbf\x41\x95\x06\x0e\xb2\xdd\x12\x09\x70\xdf\x62\xbb\x6c\x6c\xad\xa3\x51\xca\xed\xf1\x1f\xb5\xd7\xca\xd7\x48\x9a\x0c\xfd\x09\xe1\x11\x83\x77\x92\x88\x68\x68\xe7\x9e\x0f\xcc\x43\xe9\xe2\x79\x3e\x8a\xcb\x97\x51\xe0\x02\x78\xfd\x07\xdb\xb3\x66\xca\x95\x2e\x47\x77\xcd\x32\x98\x05\x68\x28\x97\x86\x9b\x23\xe7\x6b\xf6\x00\x16\xcc\xa2\xfd\x20\x05\xb9\x7f\xd3\x16\x22\x21\xdb\xad\x4b\xf5\xeb\x85\x02\xa1\xb0\x9e\x17\xc1\x1c\xe5\xf8\x18\x70\x39\x74\x30\x23\x2a\xf1\x5f\xbe\x9c\xc3\xcf\x6e\x01\x5a\x6b\xfe\x2e\x61\x6e\xb0\xef\x6e\xa1\x7c\x33\x44\xbd\xdb\x7d\xcf\x37\xc3\xd6\x4a\x12\x2d\x01\x11\xbc\xdd\x0a\x19\x0d\x6f\x57\xe4\x87\x8a\x7f\x23\x81\x02\x36\x42\x01\xd2\x13\xaa\x4a\x77\x6d\xb3\xd0\x2c\x46\xbb\x7c\x3f\x08\x7e\x22\x2d\xbd\x6b\x30\x22\x29\xd3\xd5\x59\x2b\x28\xb9\x12\xbb\x02\x93\xe9\x44\x66\x53\xf7\xe3\x37\xdf\xf8\xbe\xd6\xc9\x0f\xe1\x83\x14\x94\xae\x38\x9f\x4e\xa4\x6f\x12\xac\x8d\xdf\xbe\x71\xf3\x16\x5e\x47\x2d\x77\xa1\xd4\x5a\x47\x5a\xa6\x50\x1f\xaa\x80\x47\x6d\x03\xf9\xaa\x90\xf1\x35\xa2\x49\xdb\xc9\x25\x64\xdc\x5a\x7b\xb7\xfb\xde\xda\x99\x02\x2b\x1c\x73\x09\x24\xda\x57\x9a\x68\x70\x13\x8c\x82\xa6\xdc\x36\x3f\x3a\x42\x6d\x63\x67\xad\x6e\x1a\x2b\x14\x04\x41\x2d\x3c\xff\xda\x8d\xb7\xae\xcf\x99\x96\xcd\x8d\xbf\x54\x59\xd3\x2b\xdd\xee\xc2\xa1\xb9\x86\x11\xd1\x04\x05\xc8\x39\x55\x89\xe0\x0a\x6e\xc1\x54\x6f\x37\x5b\x48\x50\x29\x33\xf9\xff\xfa\xcd\x1b\x6f\xf9\x09\x91\x0a\xda\x06\xa5\x7e\x05\x5d\xc9\xd9\x59\x8d\x6c\xad\xf9\xe6\x4f\xdb\xc1\xb8\x2b\xfc\x33\x98\xda\xea\x65\xaa\x87\xd6\xb2\xdd\x52\x32\x6c\xad\x67\x4c\x7c\xdb\xd5\x04\x61\xd6\xb7\x9b\xff\xb5\xf9\x01\x07\x08\x98\x82\x26\x79\x56\x93\x66\x55\x59\x6c\xb5\x21\x0c\x64\x21\x05\x48\x29\xe4\xa2\xe1\x07\xd5\xa6\xd2\xeb\x41\x79\x21\xd9\xea\x5d\x2a\x81\x9d\xfc\x8a\xbb\x63\xff\x83\xf3\xbf\x01\x00\x00\xff\xff\x0c\xf2\x43\x32\xf0\x1c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7408, mode: os.FileMode(438), modTime: time.Unix(1504534871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
