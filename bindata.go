// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x6f\x6f\x1b\xb7\x19\x7f\x1f\x20\xdf\x81\x63\x32\x48\x1a\x7c\x27\xd9\x75\x3a\x43\xd6\x09\xc8\x96\x74\x6b\xd1\x36\xdd\x92\x0e\x1b\x8a\xc2\xa0\xee\x1e\x49\xac\x79\xe4\x95\xe4\xd9\x72\x3b\xbf\x18\x06\x2c\xed\xfe\x61\x43\x9a\x75\x43\x3c\x74\x18\xd0\x61\x2f\x92\xad\xd8\xab\x62\x59\xe3\x2f\x13\xdb\xf1\xb7\x18\x48\xde\x9d\xee\xa4\x93\x6d\x15\xde\x04\x03\xd2\x91\x7c\x7e\xcf\xef\xf9\x3d\xe4\x73\x24\xdd\xfb\xc6\xad\x3b\xdf\xbd\xf7\x93\xb7\x6e\xa3\xb1\x8e\x59\xff\xea\x95\x9e\xf9\x46\x8c\xf0\x51\x80\x81\x63\xdb\x02\x24\xea\x5f\xbd\x82\x10\x42\xbd\x18\x34\x41\xe1\x98\x48\x05\x3a\xc0\x6f\xdf\x7b\xc5\xdb\xc0\x79\x9f\xa6\x9a\x41\xff\xa6\x0a\x29\x45\x37\xa5\xee\xb5\x5d\x43\xd6\xcb\x28\xdf\x46\x12\x58\x80\x95\xde\x63\xa0\xc6\x00\x1a\xa3\xb1\x84\x61\x80\xdb\xed\x30\xe2\xfe\x40\x08\x1d\x2a\xe5\x87\x22\x6e\xc7\x51\x4a\xdb\x1d\xff\x25\xbf\xd3\x0e\x95\xb2\x8f\x7e\x4c\xb9\x1f\x2a\x85\x2b\x88\x0e\x60\xac\x75\xa2\xba\xf3\x30\x43\xc1\xb5\x47\x76\x41\x89\x18\xda\xeb\xfe\xb7\x33\xb8\x72\xb3\x85\x9c\x23\x96\xfb\x50\xa1\xa4\x89\x46\x4a\x86\xe7\xb0\x7c\xaf\x44\xf2\x3d\x85\xfb\xbd\xb6\x33\x35\x02\xb6\x33\x05\xaf\x5e\xe9\x59\x17\x19\xb8\x1f\x13\xca\xd1\x87\xee\xc1\x7c\x12\xa1\xa8\xa6\x82\x77\x11\x19\x28\xc1\x52\x0d\x9b\xd3\x4e\x2d\x92\x2e\x5a\xeb\x74\x92\x49\xa9\x71\x97\x46\x7a\xdc\x45\xab\x9d\xce\x37\xb3\xd6\x7d\xe3\xc6\xa2\x0f\x85\x8c\xbd\x21\x05\x16\x95\x7d\xc4\x44\x8e\x28\xef\xa2\x0e\x22\xa9\x16\x9b\x75\xce\x25\x30\xa2\xe9\x0e\xcc\xfb\x79\xb9\xe4\x7e\xea\x28\x4c\x95\x16\xb1\x17\x0a\xae\x09\xe5\x20\xcb\xee\x34\x4c\xb4\x47\x18\x1d\xf1\x2e\x0a\x81\x6b\x90\x65\x97\x24\x8a\x28\x1f\x19\xfe\x35\xb0\xbb\x92\x24\x49\x15\x6d\x0c\x74\x34\xd6\x5d\xb4\x51\x84\x6b\x3e\x62\x07\xe4\x90\x89\xdd\x6e\x39\xa4\x02\xe7\x1a\x31\x13\xd2\x33\x44\xea\xa0\x4a\xd2\x99\x8f\x9d\x19\xbb\x59\xdf\x8d\x4e\x67\xb6\x4b\xd1\x0f\xa0\x8b\xfc\xce\x2a\xc4\x73\x84\x9d\x23\x1a\x93\x11\x58\x31\x80\xd7\x7a\x9c\xd1\x3d\x26\x13\xef\xcc\x34\x9a\x0c\x7a\x35\x62\x64\xea\x79\x76\x62\xac\xbe\x5c\x99\x17\x79\xdf\x40\x68\x2d\xe2\x2e\xda\xa8\xd1\xb7\x0a\xcc\xc8\x00\x58\x19\x3e\x14\x4c\xc8\x2e\x92\xa3\x01\x69\x76\x56\x90\xfb\xf3\x6f\xac\xb7\x6a\xdc\x38\x0a\x75\x49\xac\x3a\xa1\xcb\x38\x98\x82\x98\x75\xe2\xd1\x50\x2c\xb9\x58\x56\x6f\x54\x17\xcb\x99\x73\xb1\x36\x05\xbd\x76\xbe\x5e\x7b\x03\x11\xed\x99\xef\x88\xee\xa0\x90\x11\xa5\x02\x5c\xd0\x2a\xaa\x05\x99\x29\x47\x23\xaa\xc7\xe9\xc0\x96\x8a\x89\x64\x94\xb7\x6d\x71\xbc\x29\x35\x46\x9a\xc8\x91\x29\xa1\x5b\x03\x46\xf8\x36\x2e\x88\xe4\xd8\x51\x4a\xbd\x81\xe6\x28\xff\xe1\xe2\xb7\x4f\x92\x26\x09\x83\xf2\x6f\x6f\x77\x4c\x75\xd6\x62\x65\xf5\xf4\x18\x62\xf0\x48\x68\xe2\x9c\x82\xdb\x01\x5a\x08\xa6\x69\x12\xe0\x0f\xb3\x49\xda\x45\x8d\xe3\xcf\x3e\x3f\x39\xf8\x15\xfa\x9e\xe5\xdb\xd8\xcf\x03\xb2\x41\xd1\x9c\xd3\x90\xa0\x21\xf1\x5c\x4c\xe6\x17\x1b\x61\x44\x24\x25\xde\x98\x46\x11\xf0\x00\x6b\x99\x02\x46\x56\xb2\x00\x67\xe9\xbd\x36\x1c\xae\x77\x36\x56\x4d\x41\xa4\xb9\x4c\x6d\x62\xab\x62\x44\x77\x6a\x14\xcd\x48\x96\xf8\x7b\x09\xe5\xdb\x85\xc6\xa6\xac\x15\x8c\x8a\x12\x87\x11\x09\xcd\x6c\x08\x70\xdb\x2e\x43\x8c\x68\xe4\xfa\x31\x8a\x41\x8f\x45\x14\xe0\x44\x28\x8d\x11\xf0\x50\xef\x25\x10\xe0\x38\x35\x32\x10\xa9\xdb\x16\x26\x22\x9a\x54\xe3\xe6\x49\xaa\x1d\x0c\x65\xe0\xd9\xc7\xdc\x99\x43\x30\xed\x18\x71\x12\x43\x80\xed\xb2\xdf\x72\x2d\x4e\x8f\x32\x56\x39\x46\x1b\x1e\x4c\xb4\x83\x2a\x8d\xaa\xaa\x6d\xc7\xb9\xa4\x13\x0d\x92\x12\x66\x9f\x14\xee\x87\x4c\xa4\xd1\x56\x9a\x30\x41\xa2\xa9\xaa\x8b\x78\x1b\x7a\x39\xed\x59\xaa\x5b\xa6\x01\xd7\x33\x73\x01\xa3\x02\x03\x57\xdd\xe4\xab\x90\x91\x10\xc6\x82\x45\x20\x03\x7c\x7c\xf0\xf8\xe8\xe0\x8b\xe7\x5f\xfe\xf2\xf9\x7f\xfe\x82\xdb\xe5\xf8\xb3\x5c\xff\x6f\xf4\xa0\x5c\x81\xd4\x5b\x66\x3b\x70\xbe\x1c\x66\x54\x9d\x1c\xa6\xfd\x4c\x25\x70\x35\xd6\xa3\x47\xcf\x4e\x3e\xbe\x7f\xfa\xe0\xd9\xf1\x6f\x3f\xff\xff\xc5\x8a\xec\x96\x2a\xc0\x47\x4f\x3e\x3d\x79\xfc\xb7\xd3\x47\xbf\xc0\x7d\xf3\x5a\xda\x8a\xc4\x2e\x3f\x73\x3a\xb8\x50\xcd\xc6\x8d\x84\x1a\xa4\x5a\x2a\xd4\xc2\x19\xda\x21\x2c\x85\x00\xbf\xb1\xd1\xf9\xd1\x2a\xed\x7e\xeb\xa7\x2b\xe8\xc2\xb1\x57\xde\x04\x73\xa1\xbb\xd7\x4f\x99\x53\x28\x98\x37\x51\xde\x2a\xee\x1f\x7d\x74\xff\xe8\xd1\xb3\x5e\xdb\x8e\x99\x35\x54\xc0\x20\xcc\xe3\x53\xe9\x60\xcb\x16\xf2\x6a\x78\xd9\x98\x32\xec\x7a\x51\xa7\xdc\x86\xc8\x63\x30\xd4\x5d\xe4\xdf\x80\x78\x33\xdb\x23\x79\xd2\xbd\xaf\x5f\x82\x78\xb3\x7e\xf2\xa3\x12\x7a\x7f\x7e\x44\x4f\x24\xa6\x24\xe5\xa2\x99\x48\xfe\xf1\xd5\x6a\x32\xe9\xb5\x5d\xc7\xf9\x26\x6b\xd6\x64\x6d\x19\x93\x75\x6b\xb2\xbe\x8c\xc9\x86\x35\xd9\x58\xc6\x64\xb5\x83\x91\x8b\x1b\x22\x1b\x55\x67\xa1\x75\xaf\x5d\x2b\xd0\x7c\xe2\xdc\xfe\xe8\x22\x99\x5b\x56\xf6\xd3\x87\x87\xcb\xca\x7e\xfa\xf0\x70\x59\xd9\x4f\x1f\x1e\x2e\x2b\xfb\xe9\xc3\xc3\xaf\x2f\xbb\x89\x6a\x29\xd9\xbf\xfe\xea\x3c\xb7\x30\xa1\xea\x92\xcd\xd7\x56\xb1\xc1\x37\xbb\x53\xdc\xb7\x5b\x02\xfa\x01\xd4\x54\xa9\xca\x6c\x18\x8c\x2e\x73\xfd\xae\x5d\xd2\xfa\x1d\x30\x12\x6e\xcf\x6e\x6f\xf2\xc6\x3c\x29\x2f\x7e\xfe\xeb\xe3\x3f\xfd\xf3\xf4\xe9\xef\x5f\x7c\xfc\xaf\x8b\xe7\x55\x42\x34\x03\x6c\x5a\x32\xb0\x93\x7f\xff\x75\x29\xb0\x91\x04\xe0\xb3\x3c\x5d\x63\x8e\xf8\xf4\x70\x29\xc4\x01\x9b\xdf\xd7\xd9\xb6\x0c\xef\xc5\x83\x3f\x2f\xc9\x90\xec\xcd\x13\x24\x7b\x05\xbf\x9f\x7d\xb1\x18\xef\x42\xf5\x24\x31\x0a\x5c\x72\x21\x39\x23\xff\xfd\xa3\x27\x9f\x3e\xff\xea\xc1\x25\xa5\xdd\x81\x5d\x66\xda\x33\xc4\x4b\x4b\xbb\xc3\xbb\xb4\xb4\x97\x5e\x25\x8e\xe8\x92\xf9\x3f\x77\xcb\x35\xbd\x9a\x98\xbd\xab\x98\x2b\x75\x83\x54\x6b\xc1\xed\x7e\x51\xa5\x83\x98\xea\x05\xa5\x63\xe1\x39\x4d\x12\xaa\x20\x5a\x74\x16\x9b\x3f\xc1\xd5\x9c\xd7\xfa\x27\x9f\x7c\x76\xfc\xd1\xef\xdc\xbe\xeb\xe4\x93\xa7\xb3\x02\x38\x8e\x0b\x04\xe8\xd9\xe3\xcc\xa2\x03\x96\xf1\x18\x51\xc2\xc4\xc8\x9d\x90\x60\x42\x62\x73\x80\x5c\x2f\xce\x57\x73\xdb\x55\x32\x40\xf9\x0f\x6f\x98\x32\xe6\x65\x3b\xac\x92\xf9\xba\xe9\xac\x1c\x9e\xf2\x93\x70\xe9\xf6\xa5\x78\xbb\x54\xe0\x9d\x14\xb8\x7f\xfc\x87\xfb\xc7\x07\x8f\xdd\xd1\x70\x11\x8a\xbb\x5a\x39\x13\xc6\x6d\xcb\xa7\x30\x15\x65\x4c\x68\x86\xf5\x79\x9c\x12\x8f\x78\x6b\xa8\xe6\x65\xd8\x4b\x24\xcc\x20\x98\x83\x6d\x22\xe1\x7c\x77\x67\x90\x5f\xec\x8f\xc6\x23\x44\x98\xce\x8f\x1b\xcf\xbf\xfc\xcd\xd1\x93\x3f\x1e\x1d\xfc\x1d\xcf\x02\x63\x77\x45\x59\xe0\xd6\xdc\x45\xe1\x19\x8e\xf9\xf7\xd5\x2b\xbd\xe2\xaa\xd2\xf4\xef\x10\x89\x4c\xd2\x03\xc4\x61\xd7\xa6\xde\xbf\x47\x06\xcd\xc6\xb5\x72\xb2\x1b\xf9\x2d\x4d\x24\xc2\x34\x06\xae\xfd\x11\xe8\xdb\x0c\xcc\xcf\xef\xec\xbd\x1a\x35\x1b\xc5\xcc\x6a\xb4\x7c\x12\x45\xb7\x77\x80\xeb\xd7\xa9\xd2\xc0\x41\x36\x1b\x22\x01\xee\x5b\x6c\x37\x1b\x1b\x2b\x68\x98\x72\x7b\x84\x47\xcd\x56\xe5\x06\x91\x0c\xfc\x31\xe1\x11\x83\xb7\x93\x88\x68\x68\x16\xf7\x43\xe6\x47\xf9\x9a\x75\x2e\x8a\xeb\xd7\x51\xe0\x02\x78\xed\x07\x9b\xd3\x66\xca\x95\x2e\x47\x77\xcb\x32\x98\x06\x68\x28\x67\xc3\xaf\x5f\x6f\x36\xae\xcd\x1c\xa3\x1b\x2d\x5f\xf0\x66\x23\x64\x34\xdc\x46\x43\x11\xa6\xaa\x42\x1e\x2a\xec\x8d\x3f\x05\x6c\x88\x02\xa4\xc7\x54\x6d\x56\x7b\x0c\xf2\xab\xf6\x7c\x16\x4c\x85\x7c\x3f\x05\xb9\x77\xd7\xd6\x38\x21\x73\xf7\xa5\xdb\x87\x46\xf9\x06\xae\x40\xf0\x2d\x9f\x66\x7d\xdf\x9c\xfe\xe6\x24\xc8\x47\x80\x17\x13\xcf\xa2\x37\xdc\x5b\xfe\x0e\x61\x4d\xf0\xdd\x95\x95\x6f\x60\xd5\x3b\x9d\x77\x7d\x23\x49\x6b\x6a\xb1\x5f\x49\x4c\xa1\x9e\xab\xa2\x65\xd1\xce\x91\x6b\x32\x96\x59\x76\x7e\xfc\xc6\xeb\xdf\xd7\x3a\xf9\x21\xbc\x9f\x82\xd2\x95\xd8\x26\x63\xe9\x9b\x39\xd4\xc4\x6f\xdd\xb9\x7b\x0f\xaf\xa0\x86\xbb\xf7\x69\xac\x20\x2d\x53\x98\x1d\xaa\x80\x47\x4d\x03\xf9\x8a\x90\xf1\x2d\xa2\x49\xd3\x65\x56\xc8\xb8\xd1\x7a\xa7\xf3\x6e\xab\x6c\x00\x7e\x22\xc1\xc8\x75\x0b\x86\x24\x65\x35\x8e\xb9\x04\x12\xed\x29\x4d\x34\x38\x21\x51\xb0\x68\xfa\x9a\x0f\x1d\xa2\xa6\xb1\xb3\x56\x77\x8d\x15\x0a\x82\x60\x26\x3c\xff\xd6\x9d\x37\x6f\xcf\x99\x96\xcd\x8d\xbf\x54\x59\xd3\xb5\x4e\xa7\x76\x68\xae\x61\x44\x34\x41\x01\x72\x4e\x55\x22\xb8\x82\x7b\x30\xd1\x9b\x8b\x2d\x24\xa8\x94\x99\x79\xf8\xda\xdd\x3b\x6f\xfa\x09\x91\x0a\x9a\x06\xa5\xb5\xc0\xc6\xea\x37\x2d\x83\x8d\x96\x6f\xbe\x9a\x0e\xc6\x5d\x85\x5f\xc0\xd4\x16\x28\x53\x20\xb4\x96\xcd\x86\x92\x61\x63\x25\x63\xe2\xdb\xae\x45\x10\x66\x09\xbb\xfc\xb7\xe6\x07\xec\x23\x60\x0a\x16\xc9\xb3\x9c\x34\xcb\xca\x62\x0b\x0a\x61\x20\x0b\x29\x40\x4a\x21\xeb\x86\xef\x57\x9b\x4a\x8f\xfb\xe5\x85\x64\x0b\x74\xf9\x9f\x49\xf9\x4d\x74\xdb\xfe\xc7\xee\xbf\x01\x00\x00\xff\xff\x16\xd8\xe4\xaf\xc1\x1b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 7105, mode: os.FileMode(438), modTime: time.Unix(1504419728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
